/**
 * @fileoverview Service functions for creating Zora coins
 * @module createCoin
 */

import {createCoinCall, createCoin} from "@zoralabs/coins-sdk";
import { setApiKey } from "@zoralabs/coins-sdk";
import { base } from 'viem/chains';
import { toast } from 'react-hot-toast';

// Initialize API key for production environments
// Uses environment variable or allows manual override
const initializeApiKey = () => {
  const apiKey = process.env.NEXT_PUBLIC_ZORA_API_KEY;
  if (apiKey) {
    setApiKey(apiKey);
    console.log("Zora API key initialized from environment variables");
  }
};

// Call initialization on module load
initializeApiKey();

// SDK'nın işaret ettiği ve starter kit'in muhtemelen kullandığı (kanonik olmayan) fabrika adresi
const ZORA_FACTORY_ADDRESS_SDK_TARGET = '0x02B2705500096Ff83F9eF78873ca5DFB06C00Ddc';
// Bu spesifik fabrika adresi için Base'de çalışan tickLower değeri
const WETH_TICK_LOWER_FOR_SDK_TARGET = -208200;


/**
 * Prepares contract call parameters for coin creation
 * @param {Object} params - Contract call parameters
 * @param {string} params.name - Name of the coin
 * @param {string} params.symbol - Trading symbol for the coin
 * @param {string} params.uri - Metadata URI (IPFS URI recommended)
 * @param {string} params.payoutRecipient - Address that receives creator earnings
 * @param {string} [params.platformReferrer] - Optional platform referrer address
 * @param {bigint} [params.initialPurchaseWei] - Optional initial purchase amount
 * @returns {Promise<object>} Contract call parameters
 */
export async function getCoinCreationParams({
  name,
  symbol,
  uri,
  payoutRecipient,
  initialPurchaseWei = 0n
}) {
  try {
    if (!name || !symbol || !uri || !payoutRecipient) {
      throw new Error("Required parameters missing");
    }

    // Log the parameters we intend to use
    console.log("Preparing coin creation using SDK's target address:", {
      factoryAddress: ZORA_FACTORY_ADDRESS_SDK_TARGET, // Using the non-canonical address
      name,
      symbol,
      uri,
      payoutRecipient,
      initialPurchaseWei,
      tickLower: WETH_TICK_LOWER_FOR_SDK_TARGET // Using the tickLower required for this address
    });

  

    // Call SDK's createCoinCall, providing the required tickLower
    const sdkParams = await createCoinCall({
      name,
      symbol,
      uri, // Use the provided URI directly, no need to recreate it
      payoutRecipient,
      initialPurchaseWei,
      // Provide the specific tickLower needed for the 0x02B... address
      tickLower: WETH_TICK_LOWER_FOR_SDK_TARGET
    });

    // Log the parameters returned by SDK (address will be overridden)
    console.log("Parameters generated by SDK (address will be overridden):", sdkParams);

    if (!sdkParams?.abi || !sdkParams?.functionName || !sdkParams?.args) {
      throw new Error("SDK failed to generate valid base parameters");
    }

    // *** Override the address with the one we intend to use (SDK's target) ***
    const finalParams = {
        ...sdkParams,
        address: ZORA_FACTORY_ADDRESS_SDK_TARGET, // Ensure we target the 0x02B... address
    };

    // Verify the tickLower in the final args matches our required value
    if (sdkParams.args && sdkParams.args.length > 7 && sdkParams.args[7] !== WETH_TICK_LOWER_FOR_SDK_TARGET) {
        console.warn(`SDK returned tickLower ${sdkParams.args[7]}, but we are forcing ${WETH_TICK_LOWER_FOR_SDK_TARGET}.`);
        finalParams.args = [...sdkParams.args]; // Create a mutable copy
        finalParams.args[7] = WETH_TICK_LOWER_FOR_SDK_TARGET;
    }

    // Return the parameters targeting the SDK's address with the correct tickLower
    console.log("Final parameters for simulation (using SDK target address, required tickLower):", finalParams);
    return finalParams;
  } catch (error) {
    console.error("Error preparing contract parameters:", error);
    throw new Error(`Failed to prepare contract parameters: ${error.message}`);
  }
} 

/**
 * Creates a Zora coin using the SDK's createCoin function
 * @param {Object} params - Coin creation parameters
 * @param {string} params.name - Name of the coin
 * @param {string} params.symbol - Trading symbol for the coin
 * @param {string} params.uri - Metadata URI (IPFS URI recommended)
 * @param {string} params.payoutRecipient - Address that receives creator earnings
 * @param {Array<string>} [params.owners] - Optional array of owner addresses
 * @param {bigint} [params.initialPurchaseWei] - Optional initial purchase amount
 * @param {Object} walletClient - Viem wallet client
 * @param {Object} publicClient - Viem public client
 * @param {Object} [options] - Additional options
 * @param {number} [options.gasMultiplier] - Gas multiplier percentage
 * @returns {Promise<object>} Transaction result with hash, receipt, and coin address
 */
export async function createZoraCoin({
  name,
  symbol,
  uri,
  payoutRecipient,
  owners = [],
  initialPurchaseWei = 0n
}, walletClient, publicClient, options = {}) {
  try {
    if (!name || !symbol || !uri || !payoutRecipient) {
      throw new Error("Required parameters missing");
    }
    
    if (!walletClient || !publicClient) {
      throw new Error("Wallet client and public client are required");
    }

    // If owners array is empty, use payoutRecipient as the owner
    if (!owners || owners.length === 0) {
      owners = [payoutRecipient];
    }

    console.log("Creating coin with direct SDK call:", {
      name,
      symbol,
      uri,
      payoutRecipient,
      owners,
      initialPurchaseWei,
      tickLower: WETH_TICK_LOWER_FOR_SDK_TARGET
    });

    // Check for correct chain (Base = 8453)
    const walletChainId = await walletClient.getChainId();
    if (walletChainId !== base.id) {
      // Show clear notification to user about wrong network
      toast.error(`You're connected to network ID ${walletChainId}, but Base network (${base.id}) is required. Please switch networks.`, { 
        id: "network-error", 
        duration: 5000 
      });
      
      throw new Error(`Chain mismatch: Connected to chain ${walletChainId}, but Base (${base.id}) is required. Please switch networks.`);
    }

    // Use the SDK's createCoin function directly
    const result = await createCoin(
      {
        name,
        symbol,
        uri,
        payoutRecipient,
        owners,
        initialPurchaseWei,
        tickLower: WETH_TICK_LOWER_FOR_SDK_TARGET
      },
      walletClient,
      publicClient,
      { gasMultiplier: options.gasMultiplier} // Default to 120% gas
    );

    console.log("Coin created successfully:", {
      hash: result.hash,
      address: result.address
    });

    return result;
  } catch (error) {
    console.error("Error creating coin:", error);
    throw new Error(`Failed to create coin: ${error.message}`);
  }
} 